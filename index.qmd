---
title: "Geoconnex API"
subtitle: "Feedback on requests and responses"
controls: true
format:
  revealjs: 
    reference-location: document
    code-annotations: hover
    scrollable: true
    slide-number: true
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: images/geoconnex-logo.png
 #   css: styles.css
    footer: <https://docs.geoconnex.us>
resources:
  - demo.pdf
---

## Outline

-   User Story - Data Publisher
-   User Story - Data Analyst/Tool Developer
-   Endpoints, requests, and responses

## User Story - Water Data Publisher

::: fragment
-   "As a water data publisher...
:::

::: fragment
-   I want to know all locations from all organizations where data is currently being collected that are near my own monitoring locations
:::

::: fragment
-   So that I know whether to submit reference features to geoconnex.us, and so I know which reference features to tag my own data with when I publish it.
:::

## User Story - Water Data Analyst/Tool Developer

::: fragment
-   "As a water information tool/product developer...
:::

::: fragment
-   I want to know all locations from all organizations where data types relevant to my questions are collected, and where that data can be accessed
:::

::: fragment
-   So that I can build my tool or conduct my analysis using as much relevant data as possible
:::

## Top-level Endpoints

::: fragment
https://api.geoconnex.us

-   Services to discover and filter water datasets by:

    |                                      |                             |
    |--------------------------------------|-----------------------------|
    | Space/Geometry                       | Measurement/Modeling Method |
    | Organization/ data provider          | Temporal resolution         |
    | Site Type                            | Temporal coverage           |
    | Parameter/Variable/Observed Property | Feature of Interest         |
:::

## Top-level Endpoints {.smaller}

::: columns
::: incremental
https://api.geoconnex.us...

-   /processes [^1]
-   /locationTypes [^2]
-   /catalogingFeatureCollections [^3]
-   /catalogingFeatures/{catalogingFeatureType} [^4]
-   /providers [^5]
-   /observedProperties [^6]
-   /methodTypes [^7]
-   /methods [^8]
-   /timeSpacing [^9]
:::
:::

[^1]: an array of API endpoints in the [OGC-API Processes](https://ogcapi.ogc.org/processes/) standard for more specific queries that may use the below as query parameters

[^2]: a nested json array of types of locations available and their definition for each (e.g. \[{"id":"dam", "name":"dam", "description": "a structure creating an impounded body of water on a stream")},{"name":"stream", "description": "a flowing body of water on the surface"}\])

[^3]: types of area summary features (e.g. HUC8, catchment, county, state)

[^4]: paginated (limit=x&offset=y) geojson with attributes eg "id":"https://geoconnex.us/ref/hu02/14","name":"Upper Colorado"

[^5]: nested json array with four elements per object e.g. {"id": "rise", "name": "Reclamation Information Sharing Environment", "url":"https://data.usbr.gov", "parent_organization_url":"https://usbr.gov"}

[^6]: nested json array with three elements per object e.g. {"id":"a http uri","name":"Lake/Reservoir Inflow","provider":"usgs"}

[^7]: a nested json array of broad categories of methods eg {"id":"obs",\n"name":"in-situ observation","definition":"observation from an in-situ sensor or sample from a site visit"}. Also include "remote sensing", "estimation", "simulation model", "forecast", "statistical summary"

[^8]: a nested json array of specific data production methods/sensor eg {"id":"noaa-ahps" ,"provider":"noaa", "name":"ahps", "description":"NOAA Advanced Hydrologic Prediction Service River Forecast Model","methodType":"forecast", "url": "https://water.weather.gov/ahps/about/about.php"}

[^9]: an array of time spacings of datasets available from sites eg \["unknown","intermittent","discrete","event","1 second", "15 minute", "1 day", "1 year"\]

## Processes - general pattern

Data discovery tools follow the [OGC-API Processes](https://ogcapi.ogc.org/processes) standard

::: incremental
-   /processes [^10] ?f={html,json} - GET
-   /processes/{process_name} [^11] ?f={html,json} - GET
-   /processes/{process_name}/execution [^12] ?f={html,json,csv} - GET or POST
:::

[^10]: a nested array of process names and descriptions and key words

[^11]: a nested array describing process inputs and outputs

[^12]: the endpoint at which to issue GET or POST request for the process

## /processes?f=html {.smaller}

| name                       | description                                                                                                                        |
|-----------------|-------------------------------------------------------|
| referenceMyLocations     | POST a geojson of your own locations, find candidate geoconnex reference locations that may correspond to them already             |
| findFeatures     | GET or POST query parameters to find features of relevance                                                              |
| navigateMonitoringFeatures | GET all hydrologically relevant monitoring features for a given longitude and latitude or feature identifier                       |
| findDatasets   | POST an array of feature identifiers and an array of query parameters to find relevant dataset metadata|

## /processes?f=json {.smaller}

```{r}
#| eval: FALSE
#| echo: TRUE
{
"processes": [
  {
    "version": "0.2.0",
    "id": "referenceMyLocations",
    "title": "Reference My Locations",
    "description": "POST a geojson of your own locations, find candidate geoconnex reference locations that may correspond to them already ",
"jobControlOptions": [
  "sync",
  "async"
  ]
  },
 {
    "version": "0.2.0",
    "id": "findFeatures",
    "title": "Find Features",
    "description": "GET or POST query parameters to find features of relevance",
"jobControlOptions": [
  "sync",
  "async"
  ]
  },
 {
    "version": "0.2.0",
    "id": "navigateMonitoringFeatures",
    "title": "find up or downstream monitoring features",
    "description": "GET all hydrologically relevant monitoring features for a given longitude and latitude or feature identifier",
"jobControlOptions": [
  "sync",
  "async"
  ]
  },
 {
    "version": "0.2.0",
    "id": "findDatasets",
    "title": "Find relevant dataset metadata",
    "description": "POST an array of feature identifiers and an array of query parameters to find relevant dataset metadata",
"jobControlOptions": [
  "sync",
  "async"
  ]
  }

}
```

## /processes/referenceMyLocations?f=json {.smaller}

```{r}
#| eval: FALSE
#| echo: TRUE
{
    "type": "process",
    "processor": {
        "name": "referenceMyLocations"
    },
    "title": "Reference My Locations",
    "description": "POST a geojson of your own locations, find candidate geoconnex reference locations that may correspond to them already.",
    "version": "0.5.0",
    "id": "referenceMyLocations",
    "inputs": { # <1>
        "geojson": { # <2>
            "title": "FeatureCollection",
            "description": "A geoJSON FeatureCollection of points of potential reference features",
            "schema": {
                "type": "object",
                "contentMediaType": "application/json"
            },
            "minOccurs": 1,
            "maxOccurs": 1,
            "metadata": null
        },
        "distance_threshold_km": { # <3>
          "title": "Distance threshold (km)",
            "description": "Maximum distance from input features to return candidate reference features",
            "schema": {
                "type": "number",
                "default": "0.1"
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "metadata": null
        },
      "locationType": { # <4>
          "title": "Location type",
            "description": "the type of location that the input represents. Should be from the codelist provided at the endpoint /locationTypes",
            "schema": {
                "type": "string"
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "metadata": null
        }
          
        },
    "outputs": { # <5>
        "path": {
            "title": "FeatureCollection",
            "description": "A geoJSON FeatureCollection of sites likely to be the same as the POSTed sites",
            "schema": {
                "type": "object",
                "contentMediaType": "application/json"
            }
        }
    },
    "example": { # <6>
        "inputs": { # <7>
          "geojson": {
            "type": "FeatureCollection",
            "features": [
              {
                "type": "Feature",
                "properties": {
                  "id": "station A" # <8>
                },
                "geometry": {
                  "coordinates": [
                    -79.07158950388026,
                    35.898135796576824
                  ],
                  "type": "Point"
                }
              },
              {
                "type": "Feature",
                "properties": {
                  "id": "station B"
                },
                "geometry": {
                  "coordinates": [
                    -79.06653548565708,
                    35.89697449172864
                  ],
                  "type": "Point"
                }
              }
            ]
          },
          "distance_km": 0.3, # <9>
          "locationType": "streamgage"
        },
      "output": { # <10>
        {
            "type": "FeatureCollection",
            "features": [
              {
                "type": "Feature",
                "properties": {
                  "input_id": "station A" # <11>
                  "id": "https://geoconnex.us/ref/gages/1000001", # <12>
                  "distance_km": 0.1 # <13>
                },
                "geometry": {
                  "coordinates": [
                    -79.076,
                    35.89
                  ],
                  "type": "Point"
                }
              },
              {
                "type": "Feature",
                "properties": {
                  "input_id": "station B"
                  "id": "https://geoconnex.us/ref/gages/1000002",
                  "distance_km": 0.14
                },
                "geometry": {
                  "coordinates": [
                    -79.06653548565708,
                    35.89697449172864
                  ],
                  "type": "Point"
                }
              }
            ]
          }
        }
      }
    }
}
```
1.  specification of inputs for POST request
2.  the required input of a geojson feature collection of candidate features
3.  the optional input of a distance in kilometers for which reference features that distance or closer indicate a possible match (default is 0.1km)
4.  the required input of the locationType that the input features represent and that the reference feature subset will be matched to
5.  the specification of the output that will be received in the response to the API POST request
6.  a set of example inputs and outputs for this API endpoint
7.  an example geojson FeatureCollection input
8.  example geojson FeatureCollection includes id property
9.  an example distance threshold input
10.  an example output geojson FeatureCollection
11. each feature includes the identifier from the input geojson that the feature is matched with
12. each feature includes its own identifier
13. each feature includes the distance between the matched feature and the input feature
:::

::: footer
Learn more: [geoconnex.us](https://geoconnex.us)
:::

## /processes/referenceMyLocations?f=json {.smaller}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility
