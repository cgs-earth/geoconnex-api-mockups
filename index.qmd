---
title: "Geoconnex API"
subtitle: "Feedback on requests and responses"
controls: true
format:
  revealjs: 
    reference-location: document
    code-annotations: hover
   # scrollable: true
    code-overflow: wrap
    slide-number: true
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: images/geoconnex-logo.png
 #   css: styles.css
    footer: <https://docs.geoconnex.us>
resources:
  - demo.pdf
---

```{r}
library(sf)
library(mapview)
library(tidyverse)


huc8 <- sf::read_sf("https://geoconnex.us/ref/hu08/13060001")

mainstems <- httr::POST("https://reference.geoconnex.us/processes/intersector/execution",
             body = list(
               inputs=
                 list(
                   url = "https://reference.geoconnex.us/collections/hu08/items/13060001",
                   collection = "mainstems"
                   )
               ),
             encode="json"
             )
                 

gages <- sf::read_sf(httr::POST("https://reference.geoconnex.us/processes/intersector/execution",
             body = list(
               inputs =
                 list(
                   url = "https://reference.geoconnex.us/collections/hu08/items/13060001",
                   collection = "gages"
                   )
               ),
             encode="json"
             )
)

set.seed(1234)
sample <- sample(gages$uri,10)
sample <- gages %>% filter(uri %in% sample) %>% select(name, provider_id)
sample$input_id <- sample$provider_id
sample <- st_jitter(sample)

gages <- gages%>% select(uri,name)
dist <- st_nearest_feature(sample,gages,by_element=TRUE)
sample$match_id <- gages$uri[dist]
sample$match_distance_m <- st_distance(sample,gages[dist,],by_element=TRUE)

matches <- gages %>% filter(uri %in% sample$match_id)
matches$input_id <- sample$provider_id
matches$match_distance_m <- sample$match_distance_m

sample <- sample %>% select(name, provider_id)


counties <- sf::read_sf(httr::POST("https://reference.geoconnex.us/processes/intersector/execution",
             body = list(
               inputs =
                 list(
                   url = "https://reference.geoconnex.us/collections/hu08/items/13060001",
                   collection = "counties"
                   )
               ),
             encode="json"
             )
)
```

## Introduction {.smaller}

Geoconnex is a knowledge graph incorporating relationships between:

-   hydrologic features (rivers, waterbodies, aquifers, catchments/watersheds)
-   cataloging features (counties, states, HUCs, administrative boundaries)
-   organizational data locations (stream gages, water quality stations, wells, dams)
-   reference locations (locations that many organizations collect data about. e.g. a given well often has different datasets managed by science agencies for scientific purposes, a state engineer for water rights administration, and a water utility for operational water abstraction)

::: notes
Thank you for participating etc. We are asking for feedback on the API for geoconnex. Geoconnex is a knowldege graph that aims to allow data users to discover relationships between real-world hydrologic features, cataloging features, organizational monitoring locations with data about them, and reference locations that serve as organizational monitoring locations common across multiple organizations.

What I'll do for you today is introduce the main use cases we imagine for the geoconnex API, and then go through a number of endpoints we are in the early design phases of. This is truly the first draft so your input could have a dramatic effect on the production API. Thus, rather than presenting fully specified API HTTP requests, and json payloards for requests and responses, I will describe the basic structure of the queries we aim to make possible, and the inputs and outputs that we are thinking about implementing.
:::

## Introduction {.smaller}

![Geoconnex System Technical Diagram](images/diagram.png)

::: notes
Geoconnex itself will be a metadata catalog that includes minimally standardized metadata about all sites (eg gages, wells, dams, public water systems, water quality sample stations, etc.) that all participating organizations (eg federal, state, local, Tribal, NGO, academic) publish data about. The geoconnex API will allow programmatic access to this metadata catalog. The Geoconnex API will thus provide data discovery services, but not necessarily observation/model data access directly. It will tell users that data on certain subjects exist, and where to find that data, like a library catalog. It will not directly provide the observed values. However, It will point users to relevant datasets with as much useful metadata as possible. First I'll introduce you to the two high level use cases we imagine this API meeting, and then show you mockups of the API endpoints, their inputs, and responses.
:::

## Outline

-   User Story - Data Publisher
-   User Story - Data Analyst/Tool Developer
-   Endpoints, requests, and responses

::: notes
The Geoconnex API we have designed around two main user groups, data publishers looking to get their datasets represented in the system, and data analysts or tool developers who need to discover water datasets across all organizations that might be relevant to their questions
:::

## User Story - Water Data Publisher

::: fragment
-   "As a water data publisher...
:::

::: fragment
-   I want to know all locations from all organizations where data is currently being collected that are near my own monitoring locations
:::

::: fragment
-   So that I know whether to submit reference features to geoconnex.us, and so I know which reference features to tag my own data with when I publish it.
:::

## User Story - Water Data Analyst/Tool Developer

::: fragment
-   "As a water information tool/product developer...
:::

::: fragment
-   I want to know all locations from all organizations where data types relevant to my questions are collected, and where that data can be accessed
:::

::: fragment
-   So that I can build my tool or conduct my analysis using as much relevant data as possible
:::

## Top-level Endpoints {.smaller}

::: fragment
https://api.geoconnex.us

-   Services to discover and filter water datasets by:

    |                                      |                             |
    |--------------------------------------|-----------------------------|
    | Space/Geometry                       | Measurement/Modeling Method |
    | Organization/ data provider          | Temporal resolution         |
    | Site Type (eg stream, well, dam)     | Temporal coverage           |
    | Parameter/Variable/Observed Property | Feature of Interest         |
:::

::: notes
THe top level endpoint for the geoconnex APIs will be api.geoconnex.us. There will be several endpoints under this one. Most importantly, there will be a suite of services that allow users to discover and filter water datasets by these kinds of attributes. Are there other kinds of filters that might be desireable?
:::

## Top-level Endpoints {.smaller}

::: columns
::: incremental
https://api.geoconnex.us...

-   /processes [^1]
-   /locationTypes [^2]
-   /catalogingFeatureCollections [^3]
-   /catalogingFeatures/{catalogingFeatureType} [^4]
-   /providers [^5]
-   /observedProperties [^6]
-   /methodTypes [^7]
-   /methods [^8]
-   /timeSpacing [^9]
:::
:::

[^1]: an array of API endpoints in the [OGC-API Processes](https://ogcapi.ogc.org/processes/) standard for more specific queries that may use the below as query parameters

[^2]: a nested json array of types of locations available and their definition for each (e.g. \[{"id":"dam", "name":"dam", "description": "a structure creating an impounded body of water on a stream")},{"name":"stream", "description": "a flowing body of water on the surface"}\])

[^3]: types of areal summary features (e.g. HUC, catchment, county, state)

[^4]: an array of the names and identifiers for areal summary features of a given type

[^5]: an array of identifiers, names, and URLs for data publication systems and their parent organizations (eg, nwis, National Water Information System, waterdata.usgs.gov, usgs.gov)

[^6]: an array of identfiers, names, and provider identifiers for observed properties (also often known as parameters, variables, data types) eg {"id":"inflow_lake", "name":"Lake/Reservoir Inflow","provider":"nwis"}.

[^7]: an array of identifiers, names, and definitions for broad categories of methods and their definitions (eg "id":"obs","name":"in-situ observation","definition":"observation from an in-situ sensor or sample from a site visit"). Also include "remote sensing", "estimation", "simulation model", "forecast", "statistical summary".

[^8]: an array id ids, names, descriptions, and links to documentation for specific data production methods/sensor eg {"id":"noaa-ahps" ,"provider":"noaa", "name":"ahps", "description":"NOAA Advanced Hydrologic Prediction Service River Forecast Model","methodType":"forecast", "url": "https://water.weather.gov/ahps/about/about.php"}

[^9]: an array of time spacings of datasets available from sites eg \["unknown","intermittent","discrete","event","1 second", "15 minute", "1 day", "1 year"\]

::: notes
THe first endpoint, processes, will describe the actual metadata search and retrieval services. The other endpoints are all annotated codelists for filters that can be used to subset all of the sites. After reviewing each one, do you have any opinions on if any of these are not useful? If there are other such codelists that might be useful. Note how most codelists include an id, a name, a description, and in some cases a URL. Is this enough information? Should more information be provided about each code
:::

## Processes {.smaller}

Data discovery tools will follow the [OGC-API Processes](https://ogcapi.ogc.org/processes) standard, and thus we refer to them as processes. The following tools are proposed:

| process name           | description                                                                                                                       |
|--------------------|----------------------------------------------------|
| referenceMyLocations   | POST a geospatial dataset of your own locations, find candidate geoconnex reference locations that may correspond to them already |
| findFeatures [^10]     | GET or POST query parameters to find features of relevance                                                                        |
| navigateFeatures [^11] | GET all hydrologically relevant monitoring features for a given longitude and latitude or feature identifier                      |
| findDatasets [^12]     | POST an array of feature identifiers and an array of query parameters to find relevant dataset metadata\]                         |

[^10]: similar to NWIS Site Service

[^11]: similar to NLDI or upstream/downstream EPA RAD/WATERS

[^12]: similar to whatNWISdata function from dataRetrieval

## /processes Data publisher use case {.smaller}

-   As a data publisher, would use **referenceMyLocations** to see if any existing locations in the database exist that are likely the same site/ real-world object as sits I want to publish data about. I could then add links in my metadata that I publish to ensure others know I have data about the same site.

**referenceMyLocation** Inputs:

-   input data: a geospatial dataset with at least an ID field l

-   locationType: from /locationType codelist (eg "gage", "well", "dam")

## /processes Data publisher use case example {.smaller}

POST to /processes/referenceMyLocations

Input:

-   locationType: "gage"

-   input data:

```{r, echo=FALSE, results="asis"}
mapview(sample,layer.name="input gages")
```

## /processes Data publisher use case example {.smaller}

POST to /processes/referenceMyLocations

Output:

-   spatial dataset with fields: uri, name, input_id, match_distance_m

```{r, echo=FALSE, results="asis"}
mapview(sample,layer.name="input gages") + mapview(matches,layer.name="matching reference gages",col.regions="yellow")
```

::: notes
Read use case ask if they have any questions, concerns, suggestions at a high level for other services that could be useful to a data publisher
:::

## /processes Data user imagined workflow {.smaller}

1.  use **findFeatures** discover locations within a bounding box, radius around a point, or arbitrary spatial polygon

    -   receive a geospatial dataset, including attribute id populated with geoconnex http URIs (e.g. https://geoconnex.us/usgs/monitoring-location/1000001)

```{r, result="asis", echo=FALSE}
mapview(gages)
```

2.  If desired, use **navigateFeatures** to find all sites downstream and/or upstream of a site identified by a geoconnex http URI or a latitude/longitude

3.  use **findDatasets**, given a list of URIs and query parameters for provider, observedProperty, period of record, etc., be given links to datasets relevant to your question that are about the locations found by **findFeatures** and/or **navigateFeatures** calls

::: notes
go through imagined workflow, ask if they have questions, concerns, suggestions at a high level for other services, or a different configuration of services, that could bee useful to a data user.
:::

## /processes/findLocations inputs and outputs {.smaller}

## /processes/findLocations example {.smaller}

::: notes
noes
:::

```{r}
#| eval: FALSE
#| echo: TRUE
{
    "type": "process",
    "processor": {
        "name": "referenceMyLocations"
    },
    "title": "Reference My Locations",
    "description": "POST a geojson of your own locations, find candidate geoconnex reference locations that may correspond to them already.",
    "version": "0.5.0",
    "id": "referenceMyLocations",
    "inputs": { # <1>
        "geojson": { # <2>
            "title": "FeatureCollection",
            "description": "A geoJSON FeatureCollection of points of potential reference features",
            "schema": {
                "type": "object",
                "contentMediaType": "application/json"
            },
            "minOccurs": 1,
            "maxOccurs": 1,
            "metadata": null
        },
        "distance_threshold_km": { # <3>
          "title": "Distance threshold (km)",
            "description": "Maximum distance from input features to return candidate reference features",
            "schema": {
                "type": "number",
                "default": "0.1"
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "metadata": null
        },
      "locationType": { # <4>
          "title": "Location type",
            "description": "the type of location that the input represents. Should be from the codelist provided at the endpoint /locationTypes",
            "schema": {
                "type": "string"
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "metadata": null
        }
          
        },
    "outputs": { # <5>
        "path": {
            "title": "FeatureCollection",
            "description": "A geoJSON FeatureCollection of sites likely to be the same as the POSTed sites",
            "schema": {
                "type": "object",
                "contentMediaType": "application/json"
            }
        }
    },
    "example": { # <6>
        "inputs": { # <7>
          "geojson": {
            "type": "FeatureCollection",
            "features": [
              {
                "type": "Feature",
                "properties": {
                  "id": "station A" # <8>
                },
                "geometry": {
                  "coordinates": [
                    -79.07158950388026,
                    35.898135796576824
                  ],
                  "type": "Point"
                }
              },
              {
                "type": "Feature",
                "properties": {
                  "id": "station B"
                },
                "geometry": {
                  "coordinates": [
                    -79.06653548565708,
                    35.89697449172864
                  ],
                  "type": "Point"
                }
              }
            ]
          },
          "distance_km": 0.3, # <9>
          "locationType": "streamgage"  # <9>
        },
      "output": { # <10>
        {
            "type": "FeatureCollection",
            "features": [
              {
                "type": "Feature",
                "properties": {
                  "input_id": "station A" # <11>
                  "id": "https://geoconnex.us/ref/gages/1000001", # <12>
                  "distance_km": 0.1 # <13>
                },
                "geometry": {
                  "coordinates": [
                    -79.076,
                    35.89
                  ],
                  "type": "Point"
                }
              },
              {
                "type": "Feature",
                "properties": {
                  "input_id": "station B"
                  "id": "https://geoconnex.us/ref/gages/1000002",
                  "distance_km": 0.14
                },
                "geometry": {
                  "coordinates": [
                    -79.06653548565708,
                    35.89697449172864
                  ],
                  "type": "Point"
                }
              }
            ]
          }
        }
      }
    }
}
```

1.  specification of inputs for POST request
2.  the required input of a geojson feature collection of candidate features
3.  the optional input of a distance in kilometers for which reference features that distance or closer indicate a possible match (default is 0.1km)
4.  the required input of the locationType that the input features represent and that the reference feature subset will be matched to
5.  the specification of the output that will be received in the response to the API POST request
6.  a set of example inputs and outputs for this API endpoint
7.  an example geojson FeatureCollection input
8.  example geojson FeatureCollection includes id property
9.  example distance and locationType threshold inputs
10. an example output geojson FeatureCollection
11. each feature includes the identifier from the input geojson that the feature is matched with
12. each feature includes its own identifier
13. each feature includes the distance between the matched feature and the input feature

::: footer
Learn more: [geoconnex.us](https://geoconnex.us)
:::

## /processes/navigateFeatures inputs and outputs {.smaller}


-   uri

-   pointLocation

-   y

-   x

-   crs

-   navigation

-   upstream:

    -   y/n
    -   tributary order: -1,0,1,2..

-   downstream:

    -   y/n
    -   diversion order: -1,0,1,2...

## /processes/navigateFeatures example {.smaller}


## /processes/findDatasets inputs and outputs {.smaller}

## /processes/findDatasets example {.smaller}

